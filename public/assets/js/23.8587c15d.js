(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{447:function(t,s,a){"use strict";a.r(s);var e=a(2),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("在使用 YouTube 的时候会订阅一些频道，有些频道的视频是那种可以完全不用看只要听就可以的，在之前我有开通会员来使用后台播放的功能，但是对于我来说会员的使用率还是太低了，我基本上一天也就会看一个节目而已，所以我在上次到期之后就没有续费了，但是我还是想要看那些节目但是又不想挂着让手机一直亮屏浪费多余的电（不环保 🐶），于是我就想是不是可以将一个视频提取出来他的音频然后生成一个播客的订阅源，这样我就可以在后台收听这些内容了。")]),t._v(" "),s("p",[t._v("于是搜索了一下找到了一个叫做 Podsync 的程序，这个程序可以实现我的想法，将一个 YouTube 频道转变为一个可以订阅且根据 YouTube 频道更新一起更新的播客。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/mxpv/podsync",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"/images/podsync_logo.png",alt:"Podsync Logo"}}),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("翻阅了 Readme 之后开始了安装配置，我一开始选择了使用 Docker 的安装方式因为这个安装方式不需要安装配置其他环境，在拉取下来镜像之后开始创建容器，但是在创建容器之前还得做准备工作创建一个配置文件，创建一个 toml 文件，其内容如下：")]),t._v(" "),s("div",{staticClass:"language-toml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-toml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("server")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("port")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("data_dir")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"~/data/podsync/"')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("hostname")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://podsync.example.com"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("tokens")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("youtube")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"AIzaSyBEfG3YkddyiqT-htAa5xOE4VwLMFzPtZE"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("feeds")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("feeds.wangjian")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("url")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://www.youtube.com/channel/UC8UCbiPrm2zN9nZHKdTevZA"')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("format")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"audio"')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("filters")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("not_title")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"shorts"')]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("update_period")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2h"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token table class-name"}},[t._v("downloader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token key property"}},[t._v("self_update")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),s("p",[s("code",[t._v("[server]")]),t._v(" 下面有 "),s("code",[t._v("port")]),t._v(" 和 "),s("code",[t._v("data_dir")]),t._v(" 两个内容，这两个分别是出口端口和下载的视频内容存放文件夹路径，"),s("code",[t._v("hostname")]),t._v(" 则是设置自己的域名如果不设置这个域名将不能正确的访问到对应的音频源，也就无法正常使用播客订阅")]),t._v(" "),s("p",[s("code",[t._v("[token]")]),t._v(" 是 YouTube 的 API token 可以通过下面这个方法来申请取得")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/mxpv/podsync/blob/main/docs/how_to_get_vimeo_token.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/mxpv/podsync/blob/main/docs/how_to_get_vimeo_token.md"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("code",[t._v("[feeds]")]),t._v(" 下面是用来写需要订阅的频道，它们以 "),s("code",[t._v("[feed.channel_name]")]),t._v(" 这样的形式来命名，"),s("code",[t._v("channel_name")]),t._v(" 不能出现重复它们是唯一的，在 "),s("code",[t._v("[feed.channel_name]")]),t._v(" 的 "),s("code",[t._v("url")]),t._v(" 写上订阅的频道链接，"),s("code",[t._v("format")]),t._v(" 写上输出的格式如果想要订阅的是音频的话写上 "),s("code",[t._v("audio")]),t._v(" 视频则写上 "),s("code",[t._v("video")]),t._v("，同时你还能通过 "),s("code",[t._v("filters")]),t._v(" 参数根据一定条件过滤掉对应内容， "),s("code",[t._v("update_period")]),t._v(" 设置更新时间。")]),t._v(" "),s("p",[s("code",[t._v("[downloader]")]),t._v(" 用来配置下载器，将 "),s("code",[t._v("self_update")]),t._v(" 设置为 "),s("code",[t._v("true")]),t._v(" 可以实现 downloader 的自动更新。")]),t._v(" "),s("p",[t._v("还有更多的配置内容可以查看该链接：")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/mxpv/podsync/blob/main/config.toml.example",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/mxpv/podsync/blob/main/config.toml.example"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("在配置完这些内容之后就可以创建容器来，使用如下命令创建：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v(":8080 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-v")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("pwd")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("/data:/app/data/ "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-v")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("pwd")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("/config.toml:/app/config.toml "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n  mxpv/podsync:latest\n")])])]),s("p",[t._v("创建成功之后我以为就可以正常运行了，可惜不行，运行中出现了错误，显示错误 "),s("code",[t._v("failed to execute youtube-dl: signal: killed")]),t._v(" ，于是我开始尝试查找这个错误的解决办法，我显示到对应的 GitHub 仓库的 issues 上查找但是并未找到对应的结果，之后我又使用 Google 来查找最后还是没有找到有效的解决办法。")]),t._v(" "),s("p",[t._v("于是我只能自己摸着石头过河，显示下载源码下来编译使用放弃 Docker 但是还是一样出现对应的问题。")]),t._v(" "),s("p",[t._v("我仔细看了下报错是关于 youtube-dl 这个依赖的，于是我单独使用这个依赖来下载视频，发现这个下载器下载的速度十分的慢只有几十 kb，之后我到这个依赖的仓库上看了下有没有人提关于下载慢的 issues，没想到还真有，看到其中有一个评论建议换另一个下载器 yt-dlp，于是我尝试使用推荐的这个下载器来下载视频，发现这个下载器可以跑到满速下载，我想可能是不是因为这个下载器速度不行的问题，于是我开始考虑换掉 Podsync 依赖的下载器 youtube-dl。")]),t._v(" "),s("p",[t._v("在 Podsync 的源代码中搜索了一会后发现了"),s("a",{attrs:{href:"https://github.com/mxpv/podsync/blob/main/pkg/ytdl/ytdl.go?rgh-link-date=2022-10-24T13%3A14%3A35Z#L61",target:"_blank",rel:"noopener noreferrer"}},[t._v("下载器相关的代码"),s("OutboundLink")],1),t._v("，我将代码中对应的内容替换为 yt-dlp 如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/Eg9dnTcE7SVw.png",alt:"Diff code"}})]),t._v(" "),s("p",[t._v("之后再次运行，总算是可以正常运行了！成功生成了下列内容包括订阅文件 xml！")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/4kwzerTX3SzN.png",alt:"Genarate files"}})]),t._v(" "),s("GiscusComments")],1)}),[],!1,null,null,null);s.default=n.exports}}]);