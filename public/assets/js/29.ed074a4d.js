(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{452:function(t,s,a){"use strict";a.r(s);var e=a(2),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("最近有一个需求，因为工作的需要，公司使用的是 GitLab 而我一直都是使用的 GitHub 还有就是对于公司的仓库要配置公司内对应的邮箱以及名称，这时候就需要为克隆下来的公司的仓库单独配置邮件和名称，一般都会使用下面的命令来实现对于单个仓库的独立 Git 配置，但是这样解决方法有点繁琐,因为这样的话我们每一次克隆一个公司的新项目都要我们设置一下这两个命令如果你还要设置 GPG 的话那么就是三个命令了，仓库多起来是有点繁琐的，也不是很方便。")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config user.name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config user.email "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("email"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config user.signingkey "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("signingkey"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("为了解决这个问题实现一次配置使用终身，可以将一个文件夹当做工作仓库的存放处，之后通过在 "),s("code",[t._v("~/.gitconfig")]),t._v(" 中配置对应的判断条件，当处在工作路径下的时候就使用对应的 "),s("code",[t._v(".gitconfig")]),t._v(" 配置。")]),t._v(" "),s("p",[t._v("下面假设我的工作路径为 "),s("code",[t._v("~/work")]),t._v("，为了实现可以通过判断工作路径使用对应的 "),s("code",[t._v(".gitconfig")]),t._v(" 所以可以使用 "),s("a",{attrs:{href:"https://git-scm.com/docs/git-config#_conditional_includes",target:"_blank",rel:"noopener noreferrer"}},[t._v("includeIf"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("首先我们要在自己的 home 下面的 "),s("code",[t._v(".gitconfig")]),t._v(" 添加下面的判断")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("includeIf "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gitdir:~/work/"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  path "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ~/work/.gitconfig\n")])])]),s("p",[t._v("注意：上面的 "),s("code",[t._v("gitdir:~/work/")]),t._v(" 路径一定要以 "),s("code",[t._v("/")]),t._v(" 结尾")]),t._v(" "),s("p",[t._v("之后再回到 "),s("code",[t._v("~/work")]),t._v(" 路径下添加一个 "),s("code",[t._v(".gitconfig")]),t._v(" 文件，然后在里面写上你先要再公司仓库使用的配置如下")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\tname "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("在公司使用的名称"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\temail "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("在公司使用的邮箱"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\tsigningkey "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("在公司使用的签名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("core"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    edit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nvim\n    paper "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" delta\n\t  editor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nvim\n\t  autocrlf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" input\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("commit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    gpgsign "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),s("p",[t._v("配置完上面内容之后可以克隆项目到 "),s("code",[t._v("~/work")]),t._v(" 这个文件夹下面之后进入项目使用 "),s("code",[t._v("git config --list")]),t._v(" 查看刚刚的配置是否生效")]),t._v(" "),s("GiscusComments")],1)}),[],!1,null,null,null);s.default=n.exports}}]);