(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{436:function(t,a,s){"use strict";s.r(a);var n=s(2),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("前几天使用 Github Action 实现了 Github 仓库同步到 Gitee。"),a("br"),t._v("\n之后发现 Github Action 还可以应用到其他地方，我第一个想到的就是实现自动同步 Upstream，于是在我的一番寻找 🔍 最后找到了一个叫 "),a("a",{attrs:{href:"https://github.com/exions/merge-upstream",target:"_blank",rel:"noopener noreferrer"}},[t._v("merge-upstream"),a("OutboundLink")],1),t._v(" 来自 "),a("a",{attrs:{href:"https://github.com/exions",target:"_blank",rel:"noopener noreferrer"}},[t._v("exions"),a("OutboundLink")],1),t._v(" 的 Action 库。"),a("br"),t._v("\n他的使用十分的简单仅需要简单的配置即可。")]),t._v(" "),a("p",[t._v("以我使用、参加的开源项目 "),a("a",{attrs:{href:"https://github.com/DIYgod/RSSHub",target:"_blank",rel:"noopener noreferrer"}},[t._v("RSSHub"),a("OutboundLink")],1),t._v(" 为例，在我自己 fork 的 "),a("a",{attrs:{href:"https://github.com/Fatpandac/RSSHub",target:"_blank",rel:"noopener noreferrer"}},[t._v("RSSHub"),a("OutboundLink")],1),t._v(" 仓库上我创建了一个 "),a("a",{attrs:{href:"https://github.com/Fatpandac/RSSHub/blob/action/merge_upstream/.github/workflows/merge-upstream.yml",target:"_blank",rel:"noopener noreferrer"}},[t._v("Action - merge-upstream.yml"),a("OutboundLink")],1),t._v(" 定时每天 7:00 的时候自动同步 Upstream。这样就可以方便我的使用保证其中的路由都是最新的，同时还可以方便我在开发新路由的时候省区一些不必要的操作。"),a("br"),t._v("\n在这我的创建步骤如下：")]),t._v(" "),a("ul",[a("li",[t._v("创建一个新的分支名为 "),a("code",[t._v("action/merge_upstream")]),t._v(" "),a("ul",[a("li",[t._v("将 "),a("code",[t._v("action/merge_upstream")]),t._v(" 分支设置为默认分支，因为 Github Action 只能运行在默认分支下的 Action")]),t._v(" "),a("li",[t._v("在分支内新建一个 Action，每天七点同步代码到 "),a("code",[t._v("master")]),t._v(" 分支 【"),a("a",{attrs:{href:"https://docs.github.com/cn/actions/quickstart",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何创建 Action"),a("OutboundLink")],1),t._v("】")])])])]),t._v(" "),a("p",[t._v("这样每天上午七点钟 🕖（北京时间）就会自动运行同步 Upstream 代码，也就不需要每次都要手动的更新了。"),a("br"),t._v("\n😨 但是需要"),a("strong",[t._v("注意")]),t._v("的一点是这个 Action 有一个问题就是在 Upstream 中 "),a("code",[t._v(".github/workflows")]),t._v(" 的文件有变更的时候，自动同步会失败，这样就需要手动来同步了，目前我还没有找到对应的解决办法，等待后续填坑 🕳 吧。")]),t._v(" "),a("p",[t._v("最后还可以将其添加到你自己的开源项目中方便别人即使同步你的代码变更，仅需要简单的修改即可。"),a("br"),t._v("\n例如在我的开源项目 "),a("a",{attrs:{href:"https://github.com/Fatpandac/fuck_cqooc",target:"_blank",rel:"noopener noreferrer"}},[t._v("fuck_cqooc"),a("OutboundLink")],1),t._v(" 中所示，代码如下：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Scheduled Merge Remote Action\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("schedule")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cron")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0 23 * * *"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# run every hour")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("env")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("target_branch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" secrets.target_branch "),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("&&")]),t._v(" secrets.target_branch "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" 'master' "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("jobs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("merge-upstream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" github.repository_owner "),a("span",{pre:!0,attrs:{class:"token tag"}},[t._v("!=")]),t._v(" 'Fatpandac'\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("runs-on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ubuntu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("latest\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("steps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Checkout\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uses")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" actions/checkout@v2\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("with")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ref")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" env.target_branch "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# set the branch to merge to")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("fetch-depth")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Merge Upstream $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" env.target_branch "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uses")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" exions/merge"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("upstream@v1\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("with")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("upstream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Fatpandac/fuck_cqooc "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# set the upstream repo")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("upstream-branch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" master "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# set the upstream branch to merge from")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("branch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" env.target_branch "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# set the branch to merge to")]),t._v("\n")])])]),a("p",[t._v("在配置的第 7-8 行添加了 "),a("code",[t._v("env")]),t._v("，并判断 "),a("code",[t._v("secrets")]),t._v(" 是否有设置 "),a("code",[t._v("target_branch")]),t._v("，这样就可以实现默认同步更新到 "),a("code",[t._v("master")]),t._v(" 仓库如果有设置 "),a("code",[t._v("secrets.target_branch")]),t._v(" 则就按设置来。"),a("br"),t._v("\n在第 12 行添加了一个判断用来判断当前仓库是不是 fork 仓库，使得该 Action 只有在 fork 仓库中才能正常运作。"),a("br"),t._v("\n这样其他人在 fork 了你的仓库后只要开启了这个 Action 则每天上午七点（北京时间）就会自动更新代码。")]),t._v(" "),a("GiscusComments")],1)}),[],!1,null,null,null);a.default=e.exports}}]);