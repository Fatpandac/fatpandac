(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{438:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("前几天已经实现了如何自动的更新 fork 仓库，现在是时候开始考虑如何将 fork 仓库代码同步更新到部署仓库上了!!!"),s("br"),t._v("\n这时候该 "),s("a",{attrs:{href:"https://docs.github.com/en/developers/webhooks-and-events/webhooks/about-webhooks",target:"_blank",rel:"noopener noreferrer"}},[t._v("webhook"),s("OutboundLink")],1),t._v(" 登场了， webhook 顾名思义就是一个钩子，当我们有相应的动作发生在对应仓库的时候 webhook 就会启动，访问对应的网址发送请求。")]),t._v(" "),s("p",[t._v("依据这种机制我们仅需要一些简单的代码或则不需要代码就可以实现。")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("编写 webhook 请求 API"),s("br"),t._v("\n这里我们有两种方式来实现：")]),t._v(" "),s("ul",[s("li",[t._v("使用你最熟悉的编程语言来实现，在这里我就是用了 Python\n使用 "),s("code",[t._v("flask")]),t._v(" 来做路由 "),s("code",[t._v("gitpython")]),t._v(" 来实现与 Git 的交互，一顿操作猛如虎，最终成品如下")])]),t._v(" "),s("div",{staticClass:"language-Python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" flask\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" git "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Repo\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" os\n\nREPO_PATH "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/home/Fatpandac/RSSHub"')]),t._v("\nYARN_START "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string-interpolation"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("f'cd ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("REPO_PATH"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v(" && nohup yarn start > rss.log &'")])]),t._v("\nKILL_NODE_PS "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"ps aux | grep node | awk '{print $2}' | xargs -I{} kill -9 {}\"")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("up")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    os"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("system"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("KILL_NODE_PS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    repo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("REPO_PATH"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("git"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("checkout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"master"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    repo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("git"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pull"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    os"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("system"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("YARN_START"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nserver "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" flask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Flask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__name__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("route")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/sync-rsshub'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" methods"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'POST'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" flask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("method "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'POST'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        up"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'__main__'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("run"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("host"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0.0.0.0'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" port"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("ul",[s("li",[t._v("还有一种方法就是使用现成的工具了啦，你可以使用类似与 "),s("a",{attrs:{href:"https://github.com/adnanh/webhook",target:"_blank",rel:"noopener noreferrer"}},[t._v("webhook"),s("OutboundLink")],1),t._v(" 这样的工具，仅需要写一些简单的配置就可以了，具体请查看"),s("a",{attrs:{href:"https://github.com/adnanh/webhook#readme",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),s("OutboundLink")],1)])])]),t._v(" "),s("li",[s("p",[t._v("设置对应仓库的 webhook\n进入到你需要设置的仓库设置页面即可看到一个 Webhooks 的选项，进入后点击 "),s("code",[t._v("Add webhook")]),t._v("，即可看到如下界面："),s("br"),t._v(" "),s("img",{attrs:{src:"/images/gaVNfQHMXT426Ob.png",alt:"Add webhook 界面"}}),t._v(" "),s("code",[t._v("Playload URL")]),t._v(" 填入你刚刚设置的 API 路由地址"),s("br"),t._v(" "),s("code",[t._v("Content type")]),t._v(" 根据你的需求填写，我这里就选择 json\n其他选项按需选择即可，之后点击绿色的 "),s("code",[t._v("Add webhook")]),t._v(" 即可，第一次添加会向 API 地址发送请求的。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"},[t._v("如何测试")]),s("p",[t._v("如果后续需要对自动化进行测试，可以点击到对应的 webhook 页面找到下面这个内容，点击 "),s("code",[t._v("Redeliver")]),t._v(" 即可。\n"),s("img",{attrs:{src:"/images/I9tTfKNjv2usEWZ.png",alt:"Deliveries 界面"}})])])])]),t._v(" "),s("GiscusComments")],1)}),[],!1,null,null,null);s.default=e.exports}}]);